# All directories are relative to /home/mitch/.rtorrent/
#
# downloading - location for downloaded torrents
# session - for storing rtorrent session
# torrents - for torrent files

ratio.enable=
ratio.min.set=200
ratio.max.set=1500
ratio.upload.set=50M

#min_peers = 40
max_peers = 30

# Same as above but for seeding completed torrents (-1 = same as downloading)
#min_peers_seed = 10
max_peers_seed = 30

# Maximum number of simultanious uploads per torrent.
max_uploads = 15

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0
upload_rate = 500

# Default directory to save the downloaded torrents.
directory = /home/mitch/.rtorrent/downloading

# Default session directory. 
session = /home/mitch/.rtorrent/session

# Watch a directory for new torrents, and stop those that have been deleted.
schedule = watch_directory,5,5,load_start=/home/mitch/.rtorrent/torrents/*.torrent

# Close torrents when diskspace is low. */
schedule = low_diskspace,5,60,close_low_diskspace=100M

# Stop torrents when reaching upload ratio in percent,
# when also reaching total upload in bytes, or when
# reaching final upload ratio in percent.
# example: stop at ratio 2.0 with at least 200 MB uploaded, or else ratio 20.0
# schedule = ratio,60,60,stop_on_ratio=250,200M,1000

#execute_log = /home/mitch/.rtorrent/rtorrent.log

# When the torrent finishes, it executes "mv -n <base_path> ~/Download/"
# and then sets the destination directory to "~/Download/". (0.7.7+)
#on_finished = move_complete,"execute=mv,-u,$d.get_base_path=,/home/mitch/Complete/ ;d.set_directory=/home/mitch/.rtorrent/torrents/complete/"

# The ip address reported to the tracker.
#ip = 127.0.0.1

# The ip address the listening socket and outgoing connections is bound to.
##bind = 127.0.0.1

# Port range to use for listening.
#port_range = 55556-55560

# Enable scgi web listening
#scgi_port = 127.0.0.1:5000

# Start opening ports at a random position within the port range.
#port_random = yes

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
#check_hash = no

# Set whetever the client should try to connect to UDP trackers.
#use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
#encryption = allow_incoming,enable_retry,prefer_plaintext

#
# Do not modify the following parameters unless you know what you're doing.
#

# Hash read-ahead controls how many MB to request the kernel to read
# ahead. If the value is too low the disk may not be fully utilized,
# while if too high the kernel might not be able to keep the read
# pages in memory thus end up trashing.
#hash_read_ahead = 10

# Interval between attempts to check the hash, in milliseconds.
#hash_interval = 100

# Number of attempts to check the hash while using the mincore status,
# before forcing. Overworked systems might need lower values to get a
# decent hash checking rate.
#hash_max_tries = 10

# Max number of files to keep open simultaniously.
#max_open_files = 128

# Number of sockets to simultaneously keep open.
#max_open_sockets = <no default>


# Example of scheduling commands: Switch between two ip's every 5 seconds.
#schedule = "ip_tick1,5,10,ip=torretta"
#schedule = "ip_tick2,10,10,ip=lampedusa"

# Remove a scheduled event.
#schedule_remove = "ip_tick1"

# The 'dht' option enables Distributed Hash Table support, common among
# public trackers. Will allow the client to get more peers.
#dht = auto
#dht_port = 6881
#peer_exchange = yes
